#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright © 2020 sungminoh <smoh2044@gmail.com>
#
# Distributed under terms of the MIT license.

"""
You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.

We will remove exactly one node from initial, completely removing it and any connections from this node to any other node.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:
Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1
Example 3:
Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1

Constraints:

	n == graph.length
	n == graph[i].length
	2 <= n <= 300
	graph[i][j] is 0 or 1.
	graph[i][j] == graph[j][i]
	graph[i][i] == 1
	1 <= initial.length < n
	0 <= initial[i] <= n - 1
	All the integers in initial are unique.
"""
from typing import List
import pytest
import sys


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        """Apr 28, 2024 12:04"""
        N = len(graph)

        initial = set(initial)

        def dfs(i, removed, seen):
            if i in seen:
                return False, 0
            has_initial = i in initial and i != removed
            cnt = 1
            seen.add(i)
            for j, connected in enumerate(graph[i]):
                if j != i and j != removed and connected:
                    _has_initial, _cnt = dfs(j, removed, seen)
                    if not _has_initial:
                        cnt += _cnt
                    has_initial |= _has_initial
            return has_initial, cnt

        return min([(-dfs(i, i, set())[1], i) for i in initial])[1]


@pytest.mark.parametrize('args', [
    (([[1,1,0],[1,1,0],[0,0,1]], [0,1], 0)),
    (([[1,1,0],
       [1,1,1],
       [0,1,1]],
      [0,1],
      1)),
    (([[1,1,0,0],
	   [1,1,1,0],
	   [0,1,1,1],
       [0,0,1,1]],
      [0,1],
      1)),
    (([[1,0,0,0,0,0,0,0,0],
	   [0,1,0,0,0,0,0,0,0],
	   [0,0,1,0,1,0,1,0,0],
	   [0,0,0,1,0,0,0,0,0],
	   [0,0,1,0,1,0,0,0,0],
	   [0,0,0,0,0,1,0,0,0],
	   [0,0,1,0,0,0,1,0,0],
	   [0,0,0,0,0,0,0,1,0],
	   [0,0,0,0,0,0,0,0,1]],
      [6,0,4],
      0)),
])
def test(args):
    assert args[-1] == Solution().minMalwareSpread(*args[:-1])


if __name__ == '__main__':
    sys.exit(pytest.main(["-s", "-v"] + sys.argv))
