#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright © 2020 sungminoh <smoh2044@gmail.com>
#
# Distributed under terms of the MIT license.

"""
You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix:

	0 means the cell cannot be walked through.
	1 represents an empty cell that can be walked through.
	A number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height.

In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.

You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes 1 (an empty cell).

Starting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return -1.

Note: The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.

Example 1:

Input: forest = [[1,2,3],[0,0,4],[7,6,5]]
Output: 6
Explanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.

Example 2:

Input: forest = [[1,2,3],[0,0,0],[7,6,5]]
Output: -1
Explanation: The trees in the bottom row cannot be accessed as the middle row is blocked.

Example 3:

Input: forest = [[2,3,4],[0,0,5],[8,7,6]]
Output: 6
Explanation: You can follow the same path as Example 1 to cut off all the trees.
Note that you can cut off the first tree at (0, 0) before making any steps.

Constraints:

	m == forest.length
	n == forest[i].length
	1 <= m, n <= 50
	0 <= forest[i][j] <= 109
	Heights of all trees are distinct.
"""
import random
import itertools
from collections import deque
from collections import defaultdict
from typing import Deque
from typing import Set
from typing import List
import pytest
import sys


class Solution:
    def cutOffTree(self, forest: List[List[int]]) -> int:
        m, n = len(forest), len(forest[0])

        # Since heights of all trees are distinct, this can be a simple dict
        tree_positions = defaultdict(set)
        cost = [[float('inf')]*(m*n+1) for _ in range(m*n+1)]
        for i in range(m):
            for j in range(n):
                if forest[i][j]!=0:
                    tree_positions[forest[i][j]].add(i*n+j)
                    for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):
                        x, y = i+dx, j+dy
                        if 0<=x<m and 0<=y<n and forest[x][y]!=0:
                            cost[i*n+j][x*n+y] = 1

        # floyd_warshal
        for k in range(m*n):
            for i in range(m*n):
                for j in range(m*n):
                    cost[i][j] = min(cost[i][j], cost[i][k] + cost[k][j])
        # dummy destination
        for i in range(m*n+1):
            cost[i][i] = cost[i][m*n] = cost[m*n][i] = 0

        if 1 in tree_positions:
            tree_positions.pop(1)

        # no need cache since all element of the list_of_stops is length 1
        # since heights of all trees are distinct.
        def min_dist(start: int, list_of_stops: Deque[Set[int]], dest: int):
            while list_of_stops and len(list_of_stops[0]) == 0:
                list_of_stops.popleft()
            if not list_of_stops:
                return cost[start][dest]
            ret = float('inf')
            stops = list_of_stops[0]
            for stop in list(stops):
                stops.remove(stop)
                ret = min(ret, cost[start][stop] + min_dist(stop, list_of_stops, dest))
                stops.add(stop)
            return ret

        ret = min_dist(0, deque([tree_positions[h] for h in sorted(tree_positions.keys())]), m*n)
        return ret if ret != float('inf') else -1

    def cutOffTree(self, forest: List[List[int]]) -> int:
        m, n = len(forest), len(forest[0])

        tree_positions = {}
        cost = [[float('inf')]*(m*n) for _ in range(m*n)]
        for i in range(m):
            for j in range(n):
                if forest[i][j]!=0:
                    tree_positions[forest[i][j]] = i*n+j
                    for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):
                        x, y = i+dx, j+dy
                        if 0<=x<m and 0<=y<n and forest[x][y]!=0:
                            cost[i*n+j][x*n+y] = 1

        # floyd_warshal
        for k in range(m*n):
            for i in range(m*n):
                cost[i][i] = 0
                for j in range(m*n):
                    cost[i][j] = min(cost[i][j], cost[i][k] + cost[k][j])

        if 1 in tree_positions:
            tree_positions.pop(1)

        ret = 0
        start = 0
        for h in sorted(tree_positions.keys()):
            dest = tree_positions[h]
            ret += cost[start][dest]
            start = dest

        return ret if ret != float('inf') else -1

    def cutOffTree(self, forest: List[List[int]]) -> int:
        """BFS, TLE"""
        m, n = len(forest), len(forest[0])
        tree_positions = {}
        for i in range(m):
            for j in range(n):
                if forest[i][j] != 0:
                    tree_positions[forest[i][j]] = (i, j)

        if 1 in tree_positions:
            tree_positions.pop(1)

        def bfs(start, dest):
            ret = 0
            visited = set([start])
            queue = [start]
            while queue:
                new_queue = []
                for i, j in queue:
                    if (i, j) == dest:
                        return ret
                    for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):
                        x, y = i+dx, j+dy
                        if 0<=x<m and 0<=y<n and forest[x][y]!=0 and (x, y) not in visited:
                            visited.add((x, y))
                            new_queue.append((x, y))
                queue = new_queue
                ret += 1
            return float('inf')

        ret = 0
        start = (0, 0)
        for h in sorted(tree_positions.keys()):
            dest = tree_positions[h]
            ret += bfs(start, dest)
            start = dest

        return ret if ret != float('inf') else -1

    def cutOffTree(self, forest: List[List[int]]) -> int:
        """TLE"""
        m, n = len(forest), len(forest[0])

        def manhattan_dist(start, dest):
            return sum(abs(x-y) for x, y in zip(start, dest))

        def hadlock(start, dest):
            """Hadlock’s algorithm"""
            base = manhattan_dist(start, dest)
            expanded = set()
            visited = set([start])
            detour = 0
            now, later = [start], []
            while now or later:
                if not now:
                    now, later = later, []
                    detour += 1
                i, j = now.pop()
                if (i, j) == dest:
                    return 2*detour + base
                if (i, j) not in expanded:
                    expanded.add((i, j))
                    for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):
                        x, y = i+dx, j+dy
                        if 0<=x<m and 0<=y<n and forest[x][y]!=0:
                            if manhattan_dist((x, y), dest) > manhattan_dist((i, j), dest):
                                later.append((x, y))
                            else:
                                now.append((x, y))
            return float('inf')

        trees = []
        for i in range(m):
            for j in range(n):
                if forest[i][j] > 1:
                    trees.append((forest[i][j], (i, j)))

        ret = 0
        start = (0, 0)

        # Check if all trees are reachable
        queue = deque([start])
        visited = set([start])
        while queue:
            i, j = queue.popleft()
            for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):
                x, y = i+dx, j+dy
                if 0<=x<m and 0<=y<n and forest[x][y]!=0 and (x, y) not in visited:
                    visited.add((x, y))
                    queue.append((x, y))
        if not all(pos in visited for (_, pos) in trees):
            return -1

        # Calc
        for h, dest in sorted(trees):
            ret += hadlock(start, dest)
            start = dest
        return ret if ret != float('inf') else -1


@pytest.mark.parametrize('forest, expected', [
    ([[1,2,3],[0,0,4],[7,6,5]], 6),
    ([[1,2,3],[0,0,0],[7,6,5]], -1),
    ([[2,3,4],[0,0,5],[8,7,6]], 6),
    ([[56617,47231,24237,22280,3005,10630,79562,90622,41623,96953,49499,22104,17942,85468,71607,80196,0,19359,57729,10524,0,16264,92606,86811,88220,50916,51862,75190,68322,68225,76182,65038,10568,99985,13666,44829,35086,8875,69000,67012],[39118,77960,38396,66408,75433,31501,76594,71328,0,72890,70316,59280,11955,0,58342,52935,56468,96413,0,0,0,65835,72685,27593,0,0,44940,80743,49690,96146,22671,35997,86551,8144,15615,44281,31649,30011,11009,98473],[17431,98660,14736,13227,99325,43277,25481,55181,73205,38327,90752,26489,26837,77293,64694,16839,0,11577,45516,94677,0,66331,87943,24759,65064,0,60642,48599,742,38053,0,93955,38154,79089,93314,26822,94919,64059,93134,0],[81575,96701,14011,31751,84906,67676,33565,44406,11000,66642,36772,93971,44369,89750,78813,99396,80249,0,22531,0,41009,64547,0,4958,68638,65300,58221,74384,15925,98842,92817,15560,85571,10938,77779,34798,0,85231,54405,6808],[46458,72404,98061,5779,54901,15010,64514,33715,0,96018,58533,12090,0,69143,64483,74090,49430,74003,37900,8960,48670,8708,42415,44604,75290,11736,86367,98527,21526,54807,37040,54407,15866,8326,29623,14570,30453,90589,60563,87278],[1148,98611,18967,47309,23697,61630,24469,0,0,56481,67253,31395,34800,30270,97478,67104,43770,7145,87219,70561,38292,35885,83475,36700,87317,99436,47376,96501,20654,58233,83624,98364,0,55811,37887,64461,91359,48140,94241,19261],[81343,23420,81010,62236,97990,8529,0,39505,5238,90359,71949,76447,17455,58571,80822,99268,90434,20548,8352,50243,47532,17441,98153,69459,54712,50091,32061,67319,24741,64162,32592,80872,84779,94065,60478,35167,63241,17204,45036,81085],[73063,21341,50047,1927,35779,87151,54520,0,4089,74814,24515,27239,37370,0,70395,29610,13331,59797,99222,35396,27207,43232,15330,0,0,81836,0,66707,2509,51487,83203,0,97001,67081,62448,48774,81933,0,15198,59436],[11917,93710,13127,57696,14604,46362,55927,31255,71865,43570,18266,39446,60802,2330,93689,9609,0,81057,51759,86188,92999,56247,4610,81084,1722,18158,31966,0,47551,8927,26448,53919,76270,41641,63218,10867,70660,55295,0,7227]], 5577),
    ([[73177,25859,48546,44398,0,43258,97122,89958,10015,20898,64820,87293,17249,6391,49705,11017,90979,60952,8595,52499,55821,0],[1089,45310,0,25522,11362,0,65997,2259,67315,39806,51888,36703,27524,26991,48196,66467,7405,21721,48936,84886,72918,47577],[0,64500,15336,97058,23764,68718,65840,87223,17156,81947,33149,90151,88424,75471,0,33091,93209,45367,69697,14349,0,14183],[42066,55061,81003,32157,81449,21170,43986,80127,85423,97425,89192,78673,85575,27963,53526,0,0,55424,36521,74924,44238,92119],[59096,54148,74036,0,69665,11295,0,0,0,61910,26992,24048,41928,86682,37876,48250,39531,21413,64976,62424,0,48233],[85689,0,49754,9076,21228,51224,84205,96275,0,35346,48224,87861,62431,4241,57760,98843,28525,49052,77358,70132,66935,82242],[11466,80934,74310,84677,61877,75129,65359,93775,12865,63290,37990,0,12680,50002,0,43456,14309,34683,24132,0,82289,89891],[3622,56408,80057,0,82350,20560,37854,30255,0,0,97761,56309,66542,6816,38137,64751,35866,67678,23595,50354,76851,11372],[69273,69541,1786,26045,62434,78292,63356,0,22502,0,20024,0,0,49706,48473,81579,16205,99010,7767,0,19278,0],[52900,51393,20569,56701,86617,3328,21958,35541,9408,96586,71442,77991,30367,79828,32677,77520,8939,44163,65353,70856,37160,0],[15007,0,99863,60594,67689,64017,37552,52164,36250,98960,9336,5598,70343,38631,14176,32508,43555,49304,60871,7533,0,93428],[96502,48246,55050,59744,0,73851,6279,47426,89297,44825,24244,72587,13488,5154,78536,82475,0,93981,33281,23148,77915,95680],[29864,51020,26461,55532,37299,98091,73886,39527,0,86518,6109,36579,28160,70750,95066,50091,65634,17634,93435,18644,10760,79992],[75144,58388,64104,0,87761,12221,55196,91078,9155,78451,94603,10051,0,81834,27440,21653,62758,76840,0,98554,69032,6489],[0,88892,70574,80001,57077,96853,87328,27539,0,11704,85746,26518,64145,80665,16052,97702,45398,63375,33982,8780,0,68822],[30196,77703,43120,91231,0,13660,82584,44346,21788,12088,0,26750,63121,57558,5914,31588,3498,42563,99084,54839,50100,12128],[4329,88151,85682,0,75773,95757,93633,31907,59859,18613,43573,32295,77211,44242,83589,34188,43195,91278,81236,99859,92152,34070],[59625,42542,0,46476,13869,54908,29072,49263,8703,52975,76361,46492,36829,4422,64716,96649,13347,37814,31734,0,6543,87910],[37053,79135,25864,0,83730,48273,55144,77519,7269,91110,54231,51276,6393,30413,46758,12522,31116,0,77695,56285,10640,50523],[37914,38217,36930,89296,7619,0,17711,1391,84998,41261,61701,32114,35860,50653,0,35210,68413,0,39630,21319,0,5258],[67541,65729,52262,96930,97492,59066,92849,73283,24681,75630,19646,67840,93151,54500,0,0,30730,2401,0,30809,0,3977],[1835,62855,84036,0,13505,0,45413,87903,5304,0,11940,85116,82471,0,38332,73992,64721,89529,93285,75514,19384,42518],[59941,25963,8179,96199,0,0,1986,78866,71483,9233,895,28507,62989,12310,21246,26078,33087,43584,91071,22460,72069,85637],[82083,489,24595,15533,46827,87481,26203,97132,48579,15708,4413,98737,0,26482,69928,53828,23619,27525,54343,70491,39804,0]], 7088),
    ([[515,79805,0,0,0,87362,32956,78775,0,0,51009,0,0,0,20179,5758,3791,40442,30098,95598,0,74504,0,54927,0,90556,97882,0,96500,44822],[40104,80386,9676,11227,0,27495,73313,99869,35110,41012,0,35922,47053,55805,0,0,76160,67346,2796,82904,3037,5093,91503,32321,0,69597,81027,0,68830,27465],[37347,0,4835,70509,0,0,9242,50335,15201,0,59366,0,0,48117,41188,0,95145,28561,79551,62290,45508,62475,37337,60803,47099,29303,61819,15231,7442,0],[36113,0,50532,0,23192,0,65494,0,0,34380,0,64315,74925,43774,0,36745,0,11545,33528,1064,52979,20558,92881,53401,88364,50633,0,59974,86680,91942],[4371,23895,83449,14549,0,0,0,0,1697,0,0,11156,0,0,44415,96250,66749,0,0,37808,30294,0,77825,35281,21261,7760,22791,71506,71378,35869],[0,95906,5477,29368,62686,74626,0,0,3292,57850,71458,6994,24332,47199,0,86453,7961,12729,0,36786,26142,75899,10367,5136,0,0,48567,0,4267,0],[0,47438,81404,0,99782,85953,0,1474,0,0,77859,27492,79512,0,0,44179,0,33291,0,40298,90573,0,14693,0,0,20615,0,0,80809,9426],[59185,76539,22543,89881,32971,62532,0,6186,51171,0,0,0,44219,22920,55145,81245,45641,26937,56964,61540,0,83272,58589,93923,0,0,51993,11018,32920,40914],[28792,34550,0,0,0,0,46776,20453,46985,33148,0,64631,60587,0,0,7979,10,1438,26606,59616,23174,43397,50011,0,0,96074,68446,0,24410,97213],[6637,0,0,0,46374,62885,0,66858,58315,69921,10353,0,52035,10801,0,46537,78086,60064,0,12955,0,22405,0,0,0,63663,44049,90983,9030,39092],[68316,0,75357,68469,22562,52792,47661,46614,20208,80771,33677,0,86473,64628,45213,0,27504,61299,42426,0,72369,0,0,73443,38756,42794,55056,0,71292,82743],[0,19400,7256,12793,50024,20434,45549,39805,33819,10696,44111,12213,97713,0,84088,0,62581,84513,4938,61063,54619,52776,0,40744,0,0,63845,6349,50218,0],[13538,28784,60145,12945,0,92119,54231,65182,0,0,0,2922,0,37863,54976,31023,0,0,0,0,19079,38182,81770,67895,68987,3472,0,56112,0,0],[17091,59649,44936,0,0,0,0,85901,0,55885,62546,77645,0,6551,19675,61798,59921,87463,46736,3129,0,0,32162,84037,14658,79648,67550,24560,68179,8685],[12300,0,0,75965,48452,89461,99780,0,10812,1557,73720,52516,35520,96405,30673,38995,0,98526,77404,30621,0,0,0,75415,95113,0,13829,80145,0,32055],[0,60621,0,47840,86294,61665,0,0,0,69993,0,50689,0,27140,0,0,26179,17219,33127,0,10327,80166,0,27417,80480,68415,90547,15183,0,50679],[33368,20504,0,92980,46040,0,0,30842,0,78868,69263,49492,4798,0,0,80293,64224,25204,44432,7239,52253,54530,0,0,46416,0,86607,0,45692,0],[60421,57621,0,0,0,83731,0,0,0,0,16780,68228,94060,0,0,0,13926,99897,68940,69373,37375,24845,72004,52501,0,67925,64420,31923,0,7410],[41429,58822,0,40788,0,92993,86578,71773,74113,47795,0,56976,93630,0,18187,0,53650,0,6089,0,0,78241,0,0,64293,14386,41249,68600,27995,0],[71610,0,96816,87073,82756,0,79208,65884,76264,62598,46113,11570,1805,55239,15899,0,89347,0,14211,78828,0,19245,0,9473,66607,53135,77856,81182,89083,4366],[0,95986,80574,0,52743,0,0,77312,20783,0,76158,0,0,12096,0,0,63006,0,24263,0,7915,90527,61840,93702,32991,57224,0,0,0,77694],[0,71837,47343,10870,57498,0,0,0,90945,83301,26439,49797,476,10816,73494,0,0,18560,0,26330,0,43901,74993,52749,60311,0,0,69531,94886,0],[97417,83335,67746,62106,65639,67188,0,15091,39722,25233,18186,69654,55193,0,96746,0,20354,34941,1408,7550,75972,33099,0,99642,0,0,37457,63698,23431,80846],[0,0,0,0,0,13569,61278,0,37912,0,51226,11320,51979,52368,0,59585,0,59177,0,29683,75095,84515,0,5598,15230,23038,94530,21490,49186,39885],[24842,48045,7020,95738,81756,12247,0,0,0,3245,0,0,34686,70787,77412,46835,18897,39966,87671,72274,0,59108,16851,39195,0,8298,0,0,85296,58075],[12390,32808,84236,36718,59682,11301,50752,96696,13976,12237,6044,0,64544,45340,0,76435,30913,23210,38775,57304,92569,79914,69364,51351,61076,0,0,0,0,104]], -1),
    ([[3597103,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99],[101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199],[201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299],[301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399],[401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499],[501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,587,589,591,593,595,597,599],[601,603,605,607,609,611,613,615,617,619,621,623,625,627,629,631,633,635,637,639,641,643,645,647,649,651,653,655,657,659,661,663,665,667,669,671,673,675,677,679,681,683,685,687,689,691,693,695,697,699],[701,703,705,707,709,711,713,715,717,719,721,723,725,727,729,731,733,735,737,739,741,743,745,747,749,751,753,755,757,759,761,763,765,767,769,771,773,775,777,779,781,783,785,787,789,791,793,795,797,799],[801,803,805,807,809,811,813,815,817,819,821,823,825,827,829,831,833,835,837,839,841,843,845,847,849,851,853,855,857,859,861,863,865,867,869,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899],[901,903,905,907,909,911,913,915,917,919,921,923,925,927,929,931,933,935,937,939,941,943,945,947,949,951,953,955,957,959,961,963,965,967,969,971,973,975,977,979,981,983,985,987,989,991,993,995,997,999],[1001,1003,1005,1007,1009,1011,1013,1015,1017,1019,1021,1023,1025,1027,1029,1031,1033,1035,1037,1039,1041,1043,1045,1047,1049,1051,1053,1055,1057,1059,1061,1063,1065,1067,1069,1071,1073,1075,1077,1079,1081,1083,1085,1087,1089,1091,1093,1095,1097,1099],[1101,1103,1105,1107,1109,1111,1113,1115,1117,1119,1121,1123,1125,1127,1129,1131,1133,1135,1137,1139,1141,1143,1145,1147,1149,1151,1153,1155,1157,1159,1161,1163,1165,1167,1169,1171,1173,1175,1177,1179,1181,1183,1185,1187,1189,1191,1193,1195,1197,1199],[1201,1203,1205,1207,1209,1211,1213,1215,1217,1219,1221,1223,1225,1227,1229,1231,1233,1235,1237,1239,1241,1243,1245,1247,1249,1251,1253,1255,1257,1259,1261,1263,1265,1267,1269,1271,1273,1275,1277,1279,1281,1283,1285,1287,1289,1291,1293,1295,1297,1299],[1301,1303,1305,1307,1309,1311,1313,1315,1317,1319,1321,1323,1325,1327,1329,1331,1333,1335,1337,1339,1341,1343,1345,1347,1349,1351,1353,1355,1357,1359,1361,1363,1365,1367,1369,1371,1373,1375,1377,1379,1381,1383,1385,1387,1389,1391,1393,1395,1397,1399],[1401,1403,1405,1407,1409,1411,1413,1415,1417,1419,1421,1423,1425,1427,1429,1431,1433,1435,1437,1439,1441,1443,1445,1447,1449,1451,1453,1455,1457,1459,1461,1463,1465,1467,1469,1471,1473,1475,1477,1479,1481,1483,1485,1487,1489,1491,1493,1495,1497,1499],[1501,1503,1505,1507,1509,1511,1513,1515,1517,1519,1521,1523,1525,1527,1529,1531,1533,1535,1537,1539,1541,1543,1545,1547,1549,1551,1553,1555,1557,1559,1561,1563,1565,1567,1569,1571,1573,1575,1577,1579,1581,1583,1585,1587,1589,1591,1593,1595,1597,1599],[1601,1603,1605,1607,1609,1611,1613,1615,1617,1619,1621,1623,1625,1627,1629,1631,1633,1635,1637,1639,1641,1643,1645,1647,1649,1651,1653,1655,1657,1659,1661,1663,1665,1667,1669,1671,1673,1675,1677,1679,1681,1683,1685,1687,1689,1691,1693,1695,1697,1699],[1701,1703,1705,1707,1709,1711,1713,1715,1717,1719,1721,1723,1725,1727,1729,1731,1733,1735,1737,1739,1741,1743,1745,1747,1749,1751,1753,1755,1757,1759,1761,1763,1765,1767,1769,1771,1773,1775,1777,1779,1781,1783,1785,1787,1789,1791,1793,1795,1797,1799],[1801,1803,1805,1807,1809,1811,1813,1815,1817,1819,1821,1823,1825,1827,1829,1831,1833,1835,1837,1839,1841,1843,1845,1847,1849,1851,1853,1855,1857,1859,1861,1863,1865,1867,1869,1871,1873,1875,1877,1879,1881,1883,1885,1887,1889,1891,1893,1895,1897,1899],[1901,1903,1905,1907,1909,1911,1913,1915,1917,1919,1921,1923,1925,1927,1929,1931,1933,1935,1937,1939,1941,1943,1945,1947,1949,1951,1953,1955,1957,1959,1961,1963,1965,1967,1969,1971,1973,1975,1977,1979,1981,1983,1985,1987,1989,1991,1993,1995,1997,1999],[2001,2003,2005,2007,2009,2011,2013,2015,2017,2019,2021,2023,2025,2027,2029,2031,2033,2035,2037,2039,2041,2043,2045,2047,2049,2051,2053,2055,2057,2059,2061,2063,2065,2067,2069,2071,2073,2075,2077,2079,2081,2083,2085,2087,2089,2091,2093,2095,2097,2099],[2101,2103,2105,2107,2109,2111,2113,2115,2117,2119,2121,2123,2125,2127,2129,2131,2133,2135,2137,2139,2141,2143,2145,2147,2149,2151,2153,2155,2157,2159,2161,2163,2165,2167,2169,2171,2173,2175,2177,2179,2181,2183,2185,2187,2189,2191,2193,2195,2197,2199],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1109716],[28009212,56398292,14350816,38327240,88225670,29386037,66710259,79627283,95281552,88557665,75249718,41199200,27648730,85799624,2899628,50470597,63402698,57754285,53004700,99882330,93301360,47951815,15621486,60607075,47818352,79744078,97160482,32701435,57066205,33752824,87181276,2543281,7897643,17399760,3410588,37879792,26501880,1751848,56355115,83041740,6799368,54840464,26862561,15107600,70066760,27580128,5217414,61819656,30166963,79212380],[92187444,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91393931,92687716,77110826,2823546,27262485,853391,1462338,71862890,98076327,63567712,16726636,94614400,55226550,25370250,13521552,84113872,20500240,924320,1523205,39880719,22653774,13532814,54030537,53854120,1648912,33705012,44353236,28525527,70151745,41943535,63768790,36475802,94803887,4933040,17570955,46890767,5741232,35920320,946330,49658464,98386988,2473342,13375077,12920518,60128040,17509300,2632395,21996119,56053616,90695296],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45979970],[98879820,35132432,18264556,31205995,23075280,13619668,43114165,21553020,76549547,87103042,24881040,36824136,22861553,3826964,64319056,56807973,35054488,89872183,4735196,63597804,7512508,42551248,76187562,63045720,73130571,3469400,41845130,39479322,76755545,42881278,84852693,34962929,49192028,12467004,18397456,66718837,21947266,7852972,60647248,52658596,5585796,68519114,61177929,72276458,3569040,72854320,40614139,34106952,1484565,17456319],[2102,2104,2106,2108,2110,2112,2114,2116,2118,2120,2122,2124,2126,2128,2130,2132,2134,2136,2138,2140,2142,2144,2146,2148,2150,2152,2154,2156,2158,2160,2162,2164,2166,2168,2170,2172,2174,2176,2178,2180,2182,2184,2186,2188,2190,2192,2194,2196,2198,2200],[2002,2004,2006,2008,2010,2012,2014,2016,2018,2020,2022,2024,2026,2028,2030,2032,2034,2036,2038,2040,2042,2044,2046,2048,2050,2052,2054,2056,2058,2060,2062,2064,2066,2068,2070,2072,2074,2076,2078,2080,2082,2084,2086,2088,2090,2092,2094,2096,2098,2100],[1902,1904,1906,1908,1910,1912,1914,1916,1918,1920,1922,1924,1926,1928,1930,1932,1934,1936,1938,1940,1942,1944,1946,1948,1950,1952,1954,1956,1958,1960,1962,1964,1966,1968,1970,1972,1974,1976,1978,1980,1982,1984,1986,1988,1990,1992,1994,1996,1998,2000],[1802,1804,1806,1808,1810,1812,1814,1816,1818,1820,1822,1824,1826,1828,1830,1832,1834,1836,1838,1840,1842,1844,1846,1848,1850,1852,1854,1856,1858,1860,1862,1864,1866,1868,1870,1872,1874,1876,1878,1880,1882,1884,1886,1888,1890,1892,1894,1896,1898,1900],[1702,1704,1706,1708,1710,1712,1714,1716,1718,1720,1722,1724,1726,1728,1730,1732,1734,1736,1738,1740,1742,1744,1746,1748,1750,1752,1754,1756,1758,1760,1762,1764,1766,1768,1770,1772,1774,1776,1778,1780,1782,1784,1786,1788,1790,1792,1794,1796,1798,1800],[1602,1604,1606,1608,1610,1612,1614,1616,1618,1620,1622,1624,1626,1628,1630,1632,1634,1636,1638,1640,1642,1644,1646,1648,1650,1652,1654,1656,1658,1660,1662,1664,1666,1668,1670,1672,1674,1676,1678,1680,1682,1684,1686,1688,1690,1692,1694,1696,1698,1700],[1502,1504,1506,1508,1510,1512,1514,1516,1518,1520,1522,1524,1526,1528,1530,1532,1534,1536,1538,1540,1542,1544,1546,1548,1550,1552,1554,1556,1558,1560,1562,1564,1566,1568,1570,1572,1574,1576,1578,1580,1582,1584,1586,1588,1590,1592,1594,1596,1598,1600],[1402,1404,1406,1408,1410,1412,1414,1416,1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,1438,1440,1442,1444,1446,1448,1450,1452,1454,1456,1458,1460,1462,1464,1466,1468,1470,1472,1474,1476,1478,1480,1482,1484,1486,1488,1490,1492,1494,1496,1498,1500],[1302,1304,1306,1308,1310,1312,1314,1316,1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,1342,1344,1346,1348,1350,1352,1354,1356,1358,1360,1362,1364,1366,1368,1370,1372,1374,1376,1378,1380,1382,1384,1386,1388,1390,1392,1394,1396,1398,1400],[1202,1204,1206,1208,1210,1212,1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1300],[1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200],[1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100],[902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,984,986,988,990,992,994,996,998,1000],[802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900],[702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800],[602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700],[502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600],[402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500],[302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400],[202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300],[102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200],[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100]], 392880),
])
def test(forest, expected):
    assert expected == Solution().cutOffTree(forest)


if __name__ == '__main__':
    sys.exit(pytest.main(["-s", "-v"] + sys.argv))
