#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright Â© 2020 sungminoh <smoh2044@gmail.com>
#
# Distributed under terms of the MIT license.

"""
You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.

Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1

Constraints:

	n == graph.length
	n == graph[i].length
	2 <= n <= 300
	graph[i][j] is 0 or 1.
	graph[i][j] == graph[j][i]
	graph[i][i] == 1
	1 <= initial.length <= n
	0 <= initial[i] <= n - 1
	All the integers in initial are unique.
"""
from collections import defaultdict
from collections import Counter
from typing import List
import pytest
import sys


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        """Apr 27, 2024 10:01"""
        initial = set(initial)

        def dfs(i, start, seen):
            has_init = start != i and i in initial
            cnt = 1
            for j, connected in enumerate(graph[i]):
                if j != i and connected == 1 and j not in seen:
                    seen.add(j)
                    _has_init, _cnt = dfs(j, start, seen)
                    cnt += _cnt
                    has_init |= _has_init
            if has_init:
                cnt = 0
            return has_init, cnt

        mx = -1
        ret = 0
        for i in sorted(initial):
            _, cnt = dfs(i, i, set())
            if cnt > mx:
                ret = i
                mx = cnt

        return ret

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        """Apr 27, 2024 10:24"""
        class UnionFind:
            def __init__(self):
                self.d = {}
                self.rk = defaultdict(int)

            def find(self, x):
                if x not in self.d:
                    self.d[x] = x
                    self.rk[x] = 1
                if self.d[x] != x:
                    self.d[x] = self.find(self.d[x])
                return self.d[x]

            def union(self, a, b):
                pa = self.find(a)
                pb = self.find(b)
                mn, mx = sorted([pa, pb])
                self.d[pa] = self.d[pb] = mn
                if mn != mx:
                    self.rk[mn] += self.rk[mx]

            def count(self, x):
                return self.rk[self.find(x)]

        uf = UnionFind()
        N = len(graph)
        for i in range(N):
            for j in range(i+1, N):
                if graph[i][j]:
                    uf.union(i, j)

        group = {}
        for i in initial:
            group.setdefault(uf.find(i), []).append(i)

        mx = (-1, len(initial))
        for g, inits in group.items():
            cnt = uf.count(inits[0]) if len(inits) == 1 else 0
            t = (cnt, -min(inits))
            if t > mx:
                mx = t
        return -mx[1]


@pytest.mark.parametrize('args', [
    (([[1,1,0],[1,1,0],[0,0,1]], [0,1], 0)),
    (([[1,0,0],[0,1,0],[0,0,1]], [0,2], 0)),
    (([[1,1,1],[1,1,1],[1,1,1]], [1,2], 1)),
    (([[1,0,0,0,1,0,0,0,0,0],
       [0,1,1,0,0,0,0,0,0,0],
       [0,1,1,0,0,1,0,0,0,0],
       [0,0,0,1,0,0,0,0,0,0],
       [1,0,0,0,1,0,0,0,0,0],
       [0,0,1,0,0,1,0,0,0,0],
       [0,0,0,0,0,0,1,0,0,1],
       [0,0,0,0,0,0,0,1,0,0],
       [0,0,0,0,0,0,0,0,1,0],
       [0,0,0,0,0,0,1,0,0,1]], [1,3,0], 1)),
    (([[1,1,0],[1,1,0],[0,0,1]], [0,1,2], 2)),
    (([[1,0,0,0,0,0],
       [0,1,0,0,0,0],
       [0,0,1,0,0,0],
       [0,0,0,1,1,0],
       [0,0,0,1,1,0],
       [0,0,0,0,0,1]], [5,0], 0)),
])
def test(args):
    assert args[-1] == Solution().minMalwareSpread(*args[:-1])


if __name__ == '__main__':
    sys.exit(pytest.main(["-s", "-v"] + sys.argv))
