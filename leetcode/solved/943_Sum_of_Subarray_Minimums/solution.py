from pathlib import Path
import json
import bisect
from typing import List

#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright Â© 2020 sungminoh <smoh2044@gmail.com>
#
# Distributed under terms of the MIT license.

"""
Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

Example 1:

Input: arr = [3,1,2,4]
Output: 17
Explanation:
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4].
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.

Example 2:

Input: arr = [11,81,94,43,3]
Output: 444

Constraints:

	1 <= arr.length <= 3 * 104
	1 <= arr[i] <= 3 * 104
"""
import pytest
import sys


class Solution:
    def sumSubarrayMins(self, A: List[int]) -> int:
        stack = []
        memo = [0] * len(A)
        for i, n in enumerate(A):
            while stack and A[stack[-1]] >= n:
                stack.pop()
            if stack:
                memo[i] = (i - stack[-1]) * A[i] + memo[stack[-1]]
            else:
                memo[i] = (i + 1) * A[i]
            stack.append(i)
        return int(sum(memo) % (1e9 + 7))

    def sumSubarrayMins(self, A: List[int]) -> int:
        s = 0

        @lru_cache(None)
        def min_between(i, j):
            if i == j:
                return A[i]
            return min(min_between(i, j - 1), A[j])

        return int(sum(min_between(i, j) for i in range(len(A)) for j in range(i, len(A))) % (10e8 + 7))

    def sumSubarrayMins(self, arr: List[int]) -> int:
        """12/03/2022 13:25, TLE"""
        class SegmentTree:
            def __init__(self, arr, merge: Callable, identity_element) -> None:
                self.arr = arr
                self.n = len(self.arr)
                self.ie = identity_element
                self.parents = [self.ie]*(3*self.n)
                self.merge = merge
                for i, v in enumerate(arr):
                    self.update(i, v)

            def query(self, i, j):
                def q(p, l, r, i, j):
                    if i<=l and r<=j:
                        return self.parents[p]
                    ret = self.ie
                    m = l + (r-l)//2
                    if i <= m:
                        ret = self.merge(ret, q(2*p+1, l, m, i, j))
                    if j > m:
                        ret = self.merge(ret, q(2*p+2, m+1, r, i, j))
                    return ret
                return q(0, 0, self.n-1, i, j)

            def update(self, i, v):
                def u(p, l, r, i, v):
                    if l == r:
                        self.parents[p] = v
                        return
                    m = l + (r-l)//2
                    if i <= m:
                        u(2*p+1, l, m, i, v)
                    else:
                        u(2*p+2, m+1, r, i, v)
                    self.parents[p] = self.merge(self.parents[2*p+1], self.parents[2*p+2])
                u(0, 0, self.n-1, i, v)

        MOD = 10**9 + 7
        tree = SegmentTree(arr, min, float('inf'))
        ret = 0
        for i in range(len(arr)):
            for j in range(i, len(arr)):
                v = tree.query(i, j)
                ret += v
                ret %= MOD
        return ret

    def sumSubarrayMins(self, arr: List[int]) -> int:
        """12/03/2022 13:44, TLE"""
        MOD = 10**9+7
        def sub(i, j):
            if i > j:
                return 0
            mi, mv = min(enumerate(arr[i:j+1], i), key=lambda x: x[1])
            cur = (mv*(mi-i+1)*(j-mi+1))%MOD
            return (cur + sub(i, mi-1) + sub(mi+1, j))%MOD

        return sub(0, len(arr)-1)

    def sumSubarrayMins(self, arr: List[int]) -> int:
        """12/03/2022 14:08"""
        MOD = 10**9+7
        ret = 0
        stack = []
        for i, n in enumerate(arr + [-float('inf')]):
            while stack and stack[-1][1] >= n:
                j, m = stack.pop()
                s = stack[-1][0]+1 if stack else 0
                e = i-1
                ret += (m * (j-s+1)*(e-j+1)) % MOD
                ret %= MOD
            stack.append((i, n))
        return ret

    def sumSubarrayMins(self, arr: List[int]) -> int:
        """Jan 24, 2024 20:55"""
        stack = []
        ret = 0
        for i, n in enumerate(arr + [0]):
            while stack and stack[-1][0] > n:
                m, j, left = stack.pop()
                right = i-j-1
                ret += m * right
                ret += m * right * left
            ret += n
            left = i
            if stack:
                left = i-stack[-1][1]-1
            ret += n * left
            ret %= int(1e9+7)
            stack.append((n, i, left))
        return ret


@pytest.mark.parametrize('args', [
    (([1,1,1,1], 10)),
    (([3,1,2,4], 17)),
    (([11,81,94,43,3], 444)),
    (([29959, 29867, 29822, 29704, 29676, 29650, 29577, 29488, 29286, 29255, 29232, 29207, 29071, 29034, 28925, 28849, 28731, 28693, 28624, 28606, 28591, 28397, 28357, 28308, 28295, 28210, 28119, 28090, 28004, 27903, 27845, 27830, 27777, 27736, 27640, 27540, 27506, 27428, 27341, 27308, 27182, 27152, 27122, 27029, 26928, 26872, 26796, 26765, 26663, 26597, 26580, 26530, 26498, 26475, 26436, 26406, 26382, 26312, 26213, 26134, 26088, 26025, 25943, 25912, 25875, 25845, 25810, 25702, 25638, 25614, 25531, 25524, 25488, 25470, 25444, 25402, 25283, 25262, 25121, 24988, 24958, 24886, 24769, 24697, 24635, 24595, 24490, 24456, 24453, 24346, 24313, 24248, 24200, 24148, 24107, 24052, 24044, 24021, 23970, 23908, 23897, 23835, 23752, 23741, 23714, 23661, 23596, 23545, 23509, 23470, 23439, 23409, 23350, 23215, 23166, 23155, 23100, 23024, 22923, 22825, 22793, 22627, 22613, 22536, 22450, 22383, 22312, 22268, 22205, 22175, 22136, 22028, 21971, 21900, 21824, 21769, 21726, 21583, 21546, 21513, 21494, 21428, 21327, 21264, 21254, 21174, 21140, 21112, 21000, 20921, 20902, 20830, 20817, 20783, 20735, 20657, 20616, 20573, 20485, 20378, 20363, 20305, 20259, 20210, 20114, 20002, 19846, 19785, 19747, 19667, 19645, 19622, 19610, 19580, 19542, 19516, 19454, 19392, 19310, 19277, 19194, 19131, 19090, 19004, 18883, 18845, 18791, 18781, 18668, 18591, 18518, 18475, 18368, 18331, 18310, 18287, 18217, 18114, 18092, 18048, 17990, 17964, 17912, 17836, 17740, 17704, 17630, 17613, 17573, 17428, 17356, 17341, 17300, 17260, 17180, 17174, 17126, 17071, 17041, 16866, 16850, 16828, 16672, 16618, 16577, 16499, 16407, 16357, 16318, 16293, 16202, 16150, 16075, 16041, 15948, 15921, 15844, 15843, 15785, 15764, 15668, 15626, 15579, 15473, 15387, 15255, 15190, 15139, 15062, 14996, 14954, 14918, 14907, 14902, 14867, 14851, 14817, 14799, 14751, 14720, 14536, 14506, 14474, 14353, 14303, 14280, 14185, 14107, 14012, 13932, 13858, 13781, 13585, 13563, 13533, 13451, 13412, 13362, 13249, 13208, 13181, 13064, 13037, 12961, 12926, 12892, 12786, 12731, 12611, 12573, 12506, 12502, 12496, 12470, 12443, 12370, 12262, 12182, 12153, 12069, 12000, 11847, 11806, 11781, 11708, 11687, 11593, 11550, 11445, 11372, 11329, 11308, 11291, 11268, 11241, 11191, 11027, 10982, 10879, 10862, 10776, 10695, 10603, 10502, 10464, 10350, 10338, 10305, 10273, 10176, 10124, 10094, 10038, 9953, 9935, 9812, 9786, 9743, 9728, 9508, 9472, 9383, 9349, 9236, 9215, 9130, 9124, 9042, 9008, 8988, 8901, 8833, 8809, 8780, 8716, 8580, 8462, 8334, 8321, 8305, 8280, 8257, 8246, 8137, 8077, 8043, 8016, 7984, 7955, 7927, 7906, 7746, 7663, 7653, 7572, 7542, 7530, 7489, 7420, 7390, 7361, 7337, 7245, 7210, 7188, 7175, 7096, 6898, 6846, 6745, 6675, 6569, 6478, 6427, 6363, 6284, 6260, 6243, 6206, 6154, 6135, 6078, 6061, 6017, 5995, 5917, 5863, 5836, 5793, 5763, 5743, 5678, 5572, 5532, 5459, 5384, 5341, 5299, 5251, 5231, 4995, 4933, 4861, 4740, 4672, 4625, 4496, 4445, 4361, 4282, 4215, 4135, 4097, 4028, 3917, 3862, 3711, 3553, 3498, 3410, 3388, 3384, 3288, 3279, 3244, 3221, 3181, 3171, 3150, 3060, 3035, 2975, 2965, 2834, 2760, 2637, 2584, 2533, 2440, 2383, 2311, 2285, 2255, 2211, 2192, 2121, 2054, 2010, 1964, 1850, 1724, 1642, 1577, 1411, 1409, 1332, 1296, 1265, 1256, 1220, 1195, 937, 903, 880, 811, 739, 720, 650, 609, 547, 533, 459, 434, 384, 279, 231, 163, 102, 78, 30, 5, 52, 100, 155, 217, 277, 328, 389, 446, 473, 546, 583, 649, 702, 734, 768, 857, 882, 912, 1043, 1219, 1243, 1258, 1290, 1325, 1359, 1409, 1567, 1642, 1679, 1726, 1873, 1965, 2017, 2088, 2172, 2204, 2226, 2273, 2288, 2316, 2434, 2522, 2558, 2622, 2678, 2790, 2933, 2965, 3025, 3037, 3071, 3167, 3180, 3194, 3233, 3269, 3282, 3383, 3387, 3401, 3465, 3528, 3595, 3801, 3910, 4020, 4078, 4128, 4213, 4271, 4295, 4420, 4472, 4612, 4663, 4739, 4845, 4891, 4980, 5109, 5241, 5284, 5335, 5379, 5388, 5478, 5546, 5639, 5705, 5751, 5766, 5803, 5855, 5879, 5975, 6000, 6024, 6070, 6093, 6137, 6156, 6212, 6256, 6276, 6304, 6421, 6441, 6537, 6614, 6743, 6844, 6893, 7087, 7169, 7183, 7200, 7237, 7262, 7352, 7376, 7398, 7441, 7491, 7541, 7564, 7602, 7656, 7707, 7814, 7924, 7940, 7958, 8014, 8036, 8048, 8132, 8141, 8250, 8279, 8288, 8321, 8331, 8374, 8515, 8655, 8723, 8807, 8825, 8878, 8953, 8990, 9011, 9077, 9128, 9172, 9219, 9276, 9383, 9420, 9499, 9535, 9736, 9744, 9801, 9900, 9951, 10038, 10093, 10119, 10147, 10265, 10301, 10314, 10340, 10456, 10499, 10564, 10622, 10767, 10802, 10876, 10882, 10997, 11063, 11217, 11243, 11276, 11299, 11314, 11365, 11407, 11456, 11587, 11627, 11705, 11751, 11792, 11831, 11901, 12012, 12118, 12180, 12240, 12296, 12385, 12469, 12473, 12497, 12503, 12537, 12578, 12723, 12778, 12858, 12901, 12936, 13020, 13048, 13136, 13195, 13232, 13325, 13377, 13424, 13493, 13547, 13564, 13724, 13856, 13911, 13938, 14075, 14151, 14234, 14300, 14353, 14395, 14499, 14507, 14705, 14724, 14796, 14802, 14823, 14858, 14882, 14905, 14914, 14936, 14962, 15049, 15114, 15161, 15237, 15272, 15399, 15565, 15587, 15666, 15749, 15778, 15830, 15843, 15864, 15928, 16039, 16075, 16141, 16163, 16246, 16315, 16333, 16389, 16415, 16526, 16601, 16650, 16798, 16845, 16861, 16991, 17046, 17090, 17140, 17178, 17186, 17292, 17305, 17343, 17419, 17456, 17610, 17617, 17693, 17728, 17783, 17909, 17918, 17970, 18032, 18083, 18104, 18114, 18223, 18296, 18330, 18363, 18428, 18496, 18578, 18660, 18733, 18782, 18792, 18861, 18929, 19069, 19127, 19184, 19269, 19279, 19355, 19394, 19494, 19539, 19559, 19599, 19612, 19643, 19666, 19745, 19760, 19815, 19864, 20012, 20141, 20231, 20270, 20330, 20370, 20380, 20500, 20595, 20617, 20690, 20751, 20811, 20824, 20843, 20910, 20925, 21044, 21126, 21165, 21198, 21260, 21280, 21343, 21467, 21505, 21531, 21564, 21640, 21755, 21817, 21885, 21929, 22010, 22103, 22159, 22196, 22229, 22270, 22368, 22414, 22515, 22570, 22615, 22630, 22806, 22864, 22951, 23030, 23107, 23155, 23191, 23226, 23399, 23438, 23464, 23487, 23524, 23559, 23634, 23667, 23719, 23747, 23764, 23869, 23901, 23936, 24012, 24022, 24045, 24074, 24141, 24185, 24204, 24272, 24327, 24452, 24455, 24490, 24560, 24615, 24641, 24734, 24815, 24890, 24963, 25025, 25242, 25282, 25283, 25414, 25446, 25475, 25489, 25527, 25586, 25636, 25640, 25771, 25844, 25848, 25883, 25923, 26005, 26048, 26106, 26157, 26312, 26359, 26395, 26429, 26465, 26491, 26513, 26558, 26584, 26601, 26667, 26770, 26864, 26900, 26996, 27118, 27129, 27176, 27272, 27313, 27389, 27478, 27517, 27580, 27700, 27761, 27811, 27844, 27848, 27967, 28051, 28108, 28176, 28264, 28302, 28332, 28380, 28525, 28591, 28617, 28681, 28727, 28744, 28874, 28994, 29047, 29123, 29221, 29239, 29274, 29347, 29493, 29596, 29668, 29694, 29717, 29847, 29871], 508796209)),
    (([22724,13741,17006,27770,7918,19875,22139,24636,17200,29226,28888,15412,13567,3098,17615,9332,20640,21487,25981,22293,24282,25233,29877,9873,17666,16718,17127,20034,28108,549,9304,13878,15505,27207,14990,7096,25719,15442,23530,7924,28349,12042,13406,14303,9930,22758,17287,18105,18029,8833,10252,2736,11550,7868,10461,18742,20550,22455,6646,5492,29046,13995,14273,2492,20613,5175,1567,7530,28985,9974,1711,20109,5221,8542,14284,16218,9086,27744,22736,18805,2254,24541,24875,24252,24932,5214,26969,8838,7933,55,4733,10428,7000,26225,1430,13356,11366,25943,25064,9733,20346,13777,7502,20898,13957,20867,22139,16860,7930,4116,315,12694,19818,24801,8547,2048,14449,10155,10032,1419,15598,13267,21223,20349,11479,1280,29148,6089,22172,16843,904,21996,29174,4491,21461,17162,16221,13006,13402,5159,10821,20264,25473,22084,18788,6871,165,25749,22991,28404,4073,29218,9904,16914,582,23834,28049,28388,4648,4187,16433,12224,562,8647,23362,22928,7118,27581,11028,23089,10271,29590,20287,11129,1942,5632,28415,17255,23995,6385,15732,18009,28170,15168,27718,9562,17482,18759,2882,4965,7663,7869,5548,12558,2923,4492,25670,5380,13429,2428,23899,8043,19875,24581,12421,6208,4732,13792,17839,19767,17599,7327,48,4095,13233,29068,17029,29394,25233,29880,8682,20697,12927,26131,18400,12119,28297,25236,14812,12756,12099,12152,9300,5021,24912,3656,18687,4775,26036,6835,3773,534,27142,23661,9409,25935,15241,6572,17028,858,20871,8138,11215,25884,18702,28779,6799,201,25560,18274,3993,7605,28413,17318,16612,23126,27039,11706,24735,26073,28653,14413,26780,24700,14089,21538,4052,22335,11887,24838,10350,23927,8704,14962,11916,29892,7234,25262,24237,28403,20783,14898,28252,1133,27233,22262,6075,8775,25918,3113,8109,4521,6280,3912,10414,26194,17790,4776,3143,29940,7572,8599,5572,8371,28339,11133,12410,10031,17874,15739,7820,3231,16642,16722,1698,10245,12725,14518,9529,20083,24039,3580,12656,20029,17778,26173,26115,16365,26637,24197,4508,278,11595,10952,846,24313,15491,29280,25005,24235,11971,28303,21399,3152,16615,6338,19274,12074,1232,26985,27585,19102,6235,12352,20840,3476,6216,2716,28021,22648,4123,7070,19719,29212,6462,25448,13058,25725,343,15669,12560,23619,28835,3053,22598,10889,26447,25918,29922,15281,14964,6362,1535,27164,3246,12967,3044,1124,9835,3436,8491,29784,7216,23637,23668,1948,11747,4476,9740,3914,4138,21432,1626,14299,16554,12730,7426,18696,2920,5241,8861,13476,6057,19480,7856,14370,24147,20073,18082,24970,12120,12901,11718,3927,17897,14706,23941,18258,10359,25779,8296,9168,26082,29398,6352,6743,17380,733,24452,12794,21934,759,23838,16452,658,1448,12211,18697,13592,19313,27012,11460,12623,23855,1310,10171,1875,19610,20228,19921,18615,22381,418,18907,18912,25029,22632,1033,17762,12357,8389,3250,3648,4665,7174,14493,18143,7798,6124,15662,14641,2255,6856,11815,28027,13748,7388,26213,29946,4663,26172,14727,7690,24367,16482,16573,20921,11715,21017,22248,24264,1447,9202,17490,19987,17892,24089,9963,19200,15989,25272,8967,16041,7121,27742,28889,9112,25881,13031,8760,11418,22298,29516,24911,25296,9099,5853,7276,28287,4916,6385,23810,26012,7344,15683,10937,25895,17559,14295,20390,29547,19163,24245,24344,7949,11708,5967,18117,23602,12479,9994,12809,21647,1219,27734,19836,17177,426,2587,4530,18492,16777,4926,25782,9966,4193,8757,22526,14594,19136,8083,18608,7393,398,21512,13254,9048,15783,11431,24228,29112,19565,1155,19616,277,11984,2749,25905,784,20338,13866,15274,7768,11311,12988,13507,14653,25048,18927,25809,15472,15708,18863,21360,22040,16774,11996,8319,22125,1782,28716,29695,26904,26617,28719,18029,25072,5565,13771,688,10632,13049,5201,21393,5292,4814,22484,27301,27758,26006,5962,18157,15959,1537,6901,17170,25766,22651,24368,13645,28610,18342,8371,9931,11233,3922,19297,16102,24708,2922,4607,10139,6508,7534,10562,10619,15230,22191,15592,26737,1895,19689,19839,27964,17272,21322,13784,2223,2991,13670,18825,11457,5539,26036,28743,10327,8353,4234,29215,17000,16383,9408,24017,5656,19979,20102,28076,25001,13335,21702,15212,4094,16197,21582,27820,16675,7956,15404,20854,8535,3943,5788,9014,6211,8832,1265,13091,20741,311,4996,3098,12572,26232,8064,12048,10625,4656,2738,6450,1259,11801,22793,8354,29676,15123,22692,17040,17033,23448,23534,6161,4821,5526,6946,2352,6952,11921,18905,828,18440,21303,26746,19675,17021,8942,11467,18397,24085,10462,19976,10913,18571,1329,3034,19768,25723,9308,22218,23162,2043,20119,13055,6019,6132,24646,20312,12161,14184,4831,29676,15746,2219,12385,26339,9603,21980,2403,23031,18371,13662,5787,14679,23863,1531,7512,8754,8833,20043,27886,17703,19683,14793,14154,21634,20523,11001,14395,2098,9247,22576,29435,13902,13275,4342,20685,26656,1931,19435,6276,4064,19957,8582,2433,21889,26180,17532,23021,20728,16137,13676,16660,8335,156,19256,27019,10559,13117,21046,983,7460,23114,19558,1400,11263,17909,3512,28216,5215,18176,2011,7544,4367,22862,29384,26758,6512,19221,27225,19745,1845,13472,9958,19380,1852,19770,1439,1686,6851,25902,23038,7925,290,7838,27995,16670,2401,21753,18868,25425,29401,25408,20357,26322,18622,6343,15444,8968,7439,5560,2021,8559,26301,15257,15897,3327,28719,3616,28956,5591,1478,28227,931,8159,19781,17182,21977,9461,22573,1659,995,7004,24820,3362,22053,28275,29129,2740,7676,1729,22862,12700,7946,27051,17730,29281,20428,3322,4050,3540,10855,23652,27529,1620,12261,28252,23975,8395,26923,4135,10064,6135,12726,16018,2189,5280,18555,25203,2664,28695,15025,23244,1756,10720,13856,16942,28886,15160,27408,29034,26824,10546,26033,9394,21559,20914,18068,27003,23837,24405,12721,26576,21875,9469,12664,7171,25527,11201,11256,11635,16780,8465,24589,20083,23761,2051,11301,6225,5801,10112,25580,11332,1892,25433,23592,16458,1394,4585,10731,12458,9002], 188138564)),
    ((json.load(open(Path(__file__).parent/'testcase.json')), 934721673)),
])
def test(args):
    assert args[-1] == Solution().sumSubarrayMins(*args[:-1])


if __name__ == '__main__':
    sys.exit(pytest.main(["-s", "-v"] + sys.argv))
